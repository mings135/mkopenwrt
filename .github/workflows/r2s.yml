# This is a basic workflow to help you get started with Actions

name: r2s

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # 定时调度
  schedule:
    - cron: '6 0 * * 6'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 设置环境变量
env:
  TZ: Asia/Shanghai
  my_device: r2s
  source_directory: lede
  target_directory: bin/targets/rockchip/armv8

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # when set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      # 准备环境
      - name: Prepare env
        run: |
          sudo -E apt-get update
          sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libncurses-dev libpython3-dev libreadline-dev \
            libssl-dev libtool llvm lrzsz genisoimage msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \
            python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
            uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

      # 克隆项目
      - name: Clone project
        run: |
          git clone --depth=1 https://github.com/coolsnowwolf/lede ${{ env.source_directory }}

      # 修改配置
      - name: Modify config
        working-directory: ${{ env.source_directory }}
        run: |
          tmp_file="feeds.conf.default"
          sed -i '/^src-git passwall_pkg/d' ${tmp_file}
          sed -i '/^src-git passwall2/d' ${tmp_file}
          echo 'src-git passwall_pkg https://github.com/xiaorouji/openwrt-passwall-packages.git;main' >> ${tmp_file}
          echo 'src-git passwall2 https://github.com/xiaorouji/openwrt-passwall2.git;main' >> ${tmp_file}
          tmp_file="package/base-files/files/bin/config_generate"
          sed -i "s/system\.ntp\.enable_server='1'/system.ntp.enable_server='0'/" ${tmp_file}

      # 准备编译
      - name: Prepare Compile
        working-directory: ${{ env.source_directory }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install -a
          cp -f ../${{ env.my_device }}.conf .config
          make defconfig
          make download -j8

      # 编译固件
      - name: Compile firmware
        working-directory: ${{ env.source_directory }}
        run: |
          make V=s -j$(nproc)

      # 创建信息
      - name: Release info
        id: myval
        run: |
          echo "release_tag=$(date +"%Y.%m.%d")-${{ env.my_device }}" >> $GITHUB_OUTPUT
          echo "release_name=$(date +"%Y.%m.%d") ${{ env.my_device }} firmware" >> $GITHUB_OUTPUT
          echo "release_path=$(pwd)/${{ env.source_directory }}/${{ env.target_directory }}" >> $GITHUB_OUTPUT
          echo "release_status=ok" >> $GITHUB_OUTPUT

      # 上传固件
      - name: Upload firmware
        uses: softprops/action-gh-release@v2
        if: "steps.myval.outputs.release_status == 'ok' && !cancelled()"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          name: "${{ steps.myval.outputs.release_name }}"
          tag_name: "${{ steps.myval.outputs.release_tag }}"
          body_path: ${{ env.my_device }}.md
          files: |
            ${{ steps.myval.outputs.release_path }}/*.img.gz
            ${{ steps.myval.outputs.release_path }}/*.vmdk

      # 删除历史工作流
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.MY_TOKEN }}
          retain_days: 1
          keep_minimum_runs: 9

      # 删除历史版本
      - name: Delete older Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        if: "!cancelled()"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          keep_latest: 18
          delete_tags: true
